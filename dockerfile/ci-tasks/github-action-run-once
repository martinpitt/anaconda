#!/bin/sh
# Register a self-hosted runner on GitHub, wait for and run one request, and stop again.
# This ensures that broken/malicious PRs cannot leave anything permanent behind on the host machine.
# Inputs:
#   $GITHUB_TOKEN: must have "public_repo" scope
#   $GITHUB_REPOSITORY: owner/name
#   $RUNNER_NAME: string, optional (defaults to container host name)
#   $RUNNER_LABELS: string with comma separated additional labels, optional (defaults to none;
#                   the runner already adds the OS, architecture, and "self-hosted" by default)
#
# Example invocation:
# podman run -h local-runner-1 --rm -e GITHUB_TOKEN=$(< ~/.config/github-token) -e GITHUB_REPOSITORY=rhinstaller/anaconda \
#        -e RUNNER_LABELS=rhel-8,blue-cloud --entrypoint /github-action-run-once anaconda/ci-tasks
#
# Documentation:
# https://docs.github.com/en/free-pro-team@latest/actions/hosting-your-own-runners/about-self-hosted-runners
# https://developer.github.com/v3/actions/self-hosted-runners/

set -eu

export RUNNER_ALLOW_RUNASROOT=1
cd /actions-runner

# get the runner registration token
RUNNER_TOKEN=$(curl --silent --show-error -X POST -u "token:$GITHUB_TOKEN" \
    "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runners/registration-token" | \
    sed -n '/"token"/ { s/.*: "//; s/".*$//; p }')
if [ -z "$RUNNER_TOKEN" ]; then
    echo "Failed to acquire runner token" >&2
    exit 1
fi

# register runner
./config.sh --labels "ci-tasks,${RUNNER_LABELS:-}" ${RUNNER_NAME:+--name} ${RUNNER_NAME:-} --replace --token "$RUNNER_TOKEN" --unattended --url "https://github.com/$GITHUB_REPOSITORY"

# run one job
./run.sh  --once

# unregister the runner; this is ok to fail (token timed out, or runner crashed), the --replace on registration will clean it up the next time
./config.sh remove --token "$RUNNER_TOKEN" || true
